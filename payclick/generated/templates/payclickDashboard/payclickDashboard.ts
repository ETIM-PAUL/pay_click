// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllAttendance extends ethereum.Event {
  get params(): AllAttendance__Params {
    return new AllAttendance__Params(this);
  }
}

export class AllAttendance__Params {
  _event: AllAttendance;

  constructor(event: AllAttendance) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _staff(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get position(): string {
    return this._event.parameters[3].value.toString();
  }

  get email(): string {
    return this._event.parameters[4].value.toString();
  }

  get _time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class AmountPaidout extends ethereum.Event {
  get params(): AmountPaidout__Params {
    return new AmountPaidout__Params(this);
  }
}

export class AmountPaidout__Params {
  _event: AmountPaidout;

  constructor(event: AmountPaidout) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timePaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class bestStaff extends ethereum.Event {
  get params(): bestStaff__Params {
    return new bestStaff__Params(this);
  }
}

export class bestStaff__Params {
  _event: bestStaff;

  constructor(event: bestStaff) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get bestStaff(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class staffRemove extends ethereum.Event {
  get params(): staffRemove__Params {
    return new staffRemove__Params(this);
  }
}

export class staffRemove__Params {
  _event: staffRemove;

  constructor(event: staffRemove) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class tokenDeposit extends ethereum.Event {
  get params(): tokenDeposit__Params {
    return new tokenDeposit__Params(this);
  }
}

export class tokenDeposit__Params {
  _event: tokenDeposit;

  constructor(event: tokenDeposit) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class withdrawToken extends ethereum.Event {
  get params(): withdrawToken__Params {
    return new withdrawToken__Params(this);
  }
}

export class withdrawToken__Params {
  _event: withdrawToken;

  constructor(event: withdrawToken) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class payclickDashboard__allMembersResultValue0Struct extends ethereum.Tuple {
  get myAddress(): Address {
    return this[0].toAddress();
  }

  get myName(): string {
    return this[1].toString();
  }

  get position(): string {
    return this[2].toString();
  }

  get salary(): BigInt {
    return this[3].toBigInt();
  }

  get email(): string {
    return this[4].toString();
  }
}

export class payclickDashboard__companyDetailsResult {
  value0: string;
  value1: string;
  value2: string;

  constructor(value0: string, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): string {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }
}

export class payclickDashboard__salaryPaidoutResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class payclickDashboard extends ethereum.SmartContract {
  static bind(address: Address): payclickDashboard {
    return new payclickDashboard("payclickDashboard", address);
  }

  addStaff(
    _staffAdresses: Array<Address>,
    _amount: Array<BigInt>,
    _name: Array<string>,
    _position: Array<string>,
    _email: Array<string>
  ): boolean {
    let result = super.call(
      "addStaff",
      "addStaff(address[],uint256[],string[],string[],string[]):(bool)",
      [
        ethereum.Value.fromAddressArray(_staffAdresses),
        ethereum.Value.fromUnsignedBigIntArray(_amount),
        ethereum.Value.fromStringArray(_name),
        ethereum.Value.fromStringArray(_position),
        ethereum.Value.fromStringArray(_email)
      ]
    );

    return result[0].toBoolean();
  }

  try_addStaff(
    _staffAdresses: Array<Address>,
    _amount: Array<BigInt>,
    _name: Array<string>,
    _position: Array<string>,
    _email: Array<string>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addStaff",
      "addStaff(address[],uint256[],string[],string[],string[]):(bool)",
      [
        ethereum.Value.fromAddressArray(_staffAdresses),
        ethereum.Value.fromUnsignedBigIntArray(_amount),
        ethereum.Value.fromStringArray(_name),
        ethereum.Value.fromStringArray(_position),
        ethereum.Value.fromStringArray(_email)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allMembers(): Array<payclickDashboard__allMembersResultValue0Struct> {
    let result = super.call(
      "allMembers",
      "allMembers():((address,string,string,uint256,string)[])",
      []
    );

    return result[0].toTupleArray<
      payclickDashboard__allMembersResultValue0Struct
    >();
  }

  try_allMembers(): ethereum.CallResult<
    Array<payclickDashboard__allMembersResultValue0Struct>
  > {
    let result = super.tryCall(
      "allMembers",
      "allMembers():((address,string,string,uint256,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<payclickDashboard__allMembersResultValue0Struct>()
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  companyDetails(): payclickDashboard__companyDetailsResult {
    let result = super.call(
      "companyDetails",
      "companyDetails():(string,string,string)",
      []
    );

    return new payclickDashboard__companyDetailsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString()
    );
  }

  try_companyDetails(): ethereum.CallResult<
    payclickDashboard__companyDetailsResult
  > {
    let result = super.tryCall(
      "companyDetails",
      "companyDetails():(string,string,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new payclickDashboard__companyDetailsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString()
      )
    );
  }

  depositFund(_amount: BigInt): boolean {
    let result = super.call("depositFund", "depositFund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_depositFund(_amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("depositFund", "depositFund(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  markAttendance(): boolean {
    let result = super.call("markAttendance", "markAttendance():(bool)", []);

    return result[0].toBoolean();
  }

  try_markAttendance(): ethereum.CallResult<boolean> {
    let result = super.tryCall("markAttendance", "markAttendance():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  openAttendance(): boolean {
    let result = super.call("openAttendance", "openAttendance():(bool)", []);

    return result[0].toBoolean();
  }

  try_openAttendance(): ethereum.CallResult<boolean> {
    let result = super.tryCall("openAttendance", "openAttendance():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeStaff(_staff: Address): boolean {
    let result = super.call("removeStaff", "removeStaff(address):(bool)", [
      ethereum.Value.fromAddress(_staff)
    ]);

    return result[0].toBoolean();
  }

  try_removeStaff(_staff: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("removeStaff", "removeStaff(address):(bool)", [
      ethereum.Value.fromAddress(_staff)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  salaryPaidout(): payclickDashboard__salaryPaidoutResult {
    let result = super.call(
      "salaryPaidout",
      "salaryPaidout():(uint256,uint256)",
      []
    );

    return new payclickDashboard__salaryPaidoutResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_salaryPaidout(): ethereum.CallResult<
    payclickDashboard__salaryPaidoutResult
  > {
    let result = super.tryCall(
      "salaryPaidout",
      "salaryPaidout():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new payclickDashboard__salaryPaidoutResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  salaryPayment(): boolean {
    let result = super.call("salaryPayment", "salaryPayment():(bool)", []);

    return result[0].toBoolean();
  }

  try_salaryPayment(): ethereum.CallResult<boolean> {
    let result = super.tryCall("salaryPayment", "salaryPayment():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPayment(): BigInt {
    let result = super.call("totalPayment", "totalPayment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPayment", "totalPayment():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFund(to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "withdrawFund",
      "withdrawFund(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawFund(to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawFund",
      "withdrawFund(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _nftSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _companyName(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _companyLogo(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _email(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStaffCall extends ethereum.Call {
  get inputs(): AddStaffCall__Inputs {
    return new AddStaffCall__Inputs(this);
  }

  get outputs(): AddStaffCall__Outputs {
    return new AddStaffCall__Outputs(this);
  }
}

export class AddStaffCall__Inputs {
  _call: AddStaffCall;

  constructor(call: AddStaffCall) {
    this._call = call;
  }

  get _staffAdresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _name(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _position(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _email(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class AddStaffCall__Outputs {
  _call: AddStaffCall;

  constructor(call: AddStaffCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepositFundCall extends ethereum.Call {
  get inputs(): DepositFundCall__Inputs {
    return new DepositFundCall__Inputs(this);
  }

  get outputs(): DepositFundCall__Outputs {
    return new DepositFundCall__Outputs(this);
  }
}

export class DepositFundCall__Inputs {
  _call: DepositFundCall;

  constructor(call: DepositFundCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositFundCall__Outputs {
  _call: DepositFundCall;

  constructor(call: DepositFundCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MarkAttendanceCall extends ethereum.Call {
  get inputs(): MarkAttendanceCall__Inputs {
    return new MarkAttendanceCall__Inputs(this);
  }

  get outputs(): MarkAttendanceCall__Outputs {
    return new MarkAttendanceCall__Outputs(this);
  }
}

export class MarkAttendanceCall__Inputs {
  _call: MarkAttendanceCall;

  constructor(call: MarkAttendanceCall) {
    this._call = call;
  }
}

export class MarkAttendanceCall__Outputs {
  _call: MarkAttendanceCall;

  constructor(call: MarkAttendanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OpenAttendanceCall extends ethereum.Call {
  get inputs(): OpenAttendanceCall__Inputs {
    return new OpenAttendanceCall__Inputs(this);
  }

  get outputs(): OpenAttendanceCall__Outputs {
    return new OpenAttendanceCall__Outputs(this);
  }
}

export class OpenAttendanceCall__Inputs {
  _call: OpenAttendanceCall;

  constructor(call: OpenAttendanceCall) {
    this._call = call;
  }
}

export class OpenAttendanceCall__Outputs {
  _call: OpenAttendanceCall;

  constructor(call: OpenAttendanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveStaffCall extends ethereum.Call {
  get inputs(): RemoveStaffCall__Inputs {
    return new RemoveStaffCall__Inputs(this);
  }

  get outputs(): RemoveStaffCall__Outputs {
    return new RemoveStaffCall__Outputs(this);
  }
}

export class RemoveStaffCall__Inputs {
  _call: RemoveStaffCall;

  constructor(call: RemoveStaffCall) {
    this._call = call;
  }

  get _staff(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStaffCall__Outputs {
  _call: RemoveStaffCall;

  constructor(call: RemoveStaffCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SalaryPaymentCall extends ethereum.Call {
  get inputs(): SalaryPaymentCall__Inputs {
    return new SalaryPaymentCall__Inputs(this);
  }

  get outputs(): SalaryPaymentCall__Outputs {
    return new SalaryPaymentCall__Outputs(this);
  }
}

export class SalaryPaymentCall__Inputs {
  _call: SalaryPaymentCall;

  constructor(call: SalaryPaymentCall) {
    this._call = call;
  }
}

export class SalaryPaymentCall__Outputs {
  _call: SalaryPaymentCall;

  constructor(call: SalaryPaymentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class WithdrawFundCall extends ethereum.Call {
  get inputs(): WithdrawFundCall__Inputs {
    return new WithdrawFundCall__Inputs(this);
  }

  get outputs(): WithdrawFundCall__Outputs {
    return new WithdrawFundCall__Outputs(this);
  }
}

export class WithdrawFundCall__Inputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundCall__Outputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
